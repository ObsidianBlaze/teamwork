{"version":3,"sources":["../src/server - mysql.js"],"names":["bodyParser","require","Cors","jwt","port","app","use","req","res","next","header","express","static","storage","multer","diskStorage","destination","file","cb","filename","originalname","fileFilter","mimetype","upload","db","sqlite3","Database","err","console","log","message","urlencoded","extended","json","verifyToken","headers","token","status","verify","decoded","userId","user_id","get","send","post","email","body","password","pattern","test","sql","all","rows","query","result","single","undefined","user","firstName","lastName","gender","jobrole","jobRole","dept","address","length","payload","insertId","sign","title","article","details","article_id","dateCreated","flagged","patch","params","articleId","delete","comment","patt","patt1","answer","result_1","createdOn","gif_id","gifId","imageUrl","compare","a","b","all_feed","concat","sort","listen","chalk","red"],"mappings":"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","file":"server - mysql.js","sourcesContent":["import express from 'express';\r\nimport chalk from 'chalk';\r\nimport mysql from 'mysql';\r\nimport sqlite3 from 'sqlite3';\r\nconst bodyParser = require('body-parser');\r\nconst Cors = require('cors')\r\n\r\nconst jwt = require('jsonwebtoken');\r\nimport multer from 'multer';\r\n\r\nconst port = 3000;\r\nconst app = express();\r\n\r\n\r\napp.use(function (req, res, next) {\r\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n  res.header(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS\");\r\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n  next();\r\n});\r\n\r\napp.use('/images', express.static('images'));\r\n//to store images in a folder in node js\r\nconst storage = multer.diskStorage({\r\n  destination: function (req, file, cb) {\r\n    cb(null, './images');\r\n  },\r\n  filename: function (req, file, cb) {\r\n    cb(null, file.originalname);\r\n  }\r\n})\r\n//to configure which type of file to accept\r\nconst fileFilter = (req, file, cb) => {\r\n  if (file.mimetype === 'image/gif') {\r\n    cb(null, true);\r\n  } else {\r\n    cb(null, false)\r\n  }\r\n}\r\nconst upload = multer({ storage: storage, /*fileFilter*/ });\r\n\r\n// const db = mysql.createConnection({\r\n//   host: 'localhost',\r\n//   user: 'root',\r\n//   password: 'Oluranti08056965',\r\n//   database: 'teamwork'\r\n// })\r\nconst db = new sqlite3.Database('teamwork.db', (err)=>{\r\n  if(err){\r\n    return console.log(err.message);\r\n  }\r\n  console.log('Connected to database')\r\n});\r\n\r\n// db.connect((err) => {\r\n//   if (err) {\r\n//     console.log('database connection error')\r\n//     throw err\r\n//   }\r\n//   console.log('Connected to database')\r\n// })\r\n\r\n\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json()); // parse form data client\r\n\r\n\r\nconst verifyToken = (req, res, next) => {\r\n  if (!req.headers.token) {\r\n    return res.status(401).json({ \"status\": \"token error\", \"error\": \"Unauthorized request\" })\r\n  }\r\n  const token = req.headers.token\r\n  if (token === 'null') {\r\n    return res.status(401).json({ \"status\": \"token error\", \"error\": \"Token is required\" })\r\n  }\r\n  jwt.verify(token, 'secretkey', (err, decoded) => {\r\n    if (err) {\r\n      return res.status(401).json({ \"status\": \"token error\", \"error\": \"Unauthorized request\" })\r\n    }\r\n    req.userId = decoded.user_id\r\n  })\r\n  next()\r\n}\r\n//routes for creating and authenticating users\r\napp.get('/', (req, res) => {\r\n  res.send('Welcome to the TeamWork')\r\n})\r\n\r\n//login a user\r\napp.post('/v1/auth/signin', (req, res) => {\r\n  const email = req.body.email;\r\n  const password = req.body.password;\r\n  if (!req.body.email || !req.body.password) {\r\n    return res.status(400).json({\r\n      'status': 'invalid request',\r\n      'error': \"username and password are required\"\r\n    })\r\n  }\r\n  if (email === '' || password === '') {\r\n    return res.status(401).json({\r\n      \"status\": \"forbidden\",\r\n      \"error\": \"username and password are required\"\r\n    })\r\n  }\r\n  let pattern = /^[a-zA-Z0-9]+@[\\w]+\\.com$/i\r\n  if (!pattern.test(email)) {\r\n    return res.status(401).json({\r\n      \"status\": \"forbidden\",\r\n      \"error\": \"email is invalid\"\r\n    })\r\n  }\r\n  let sql = `select * from users where email='${email}' and password='${password}'`\r\n  // db.query(sql, (err, result) => {\r\n  //   if (err) {\r\n  //     console.log(err)\r\n  //   } else {\r\n\r\n  //     if (result.length > 0) {\r\n  //       let payload = { user_id: result[0].user_id }\r\n  //       let token = jwt.sign(payload, 'secretkey')\r\n  //       res.status(200).json({\r\n  //         \"status\": \"success\",\r\n  //         \"data\": {\r\n  //           \"token\": token,\r\n  //           \"userId\": payload.user_id\r\n  //         }\r\n  //       })\r\n  //     } else {\r\n  //       res.status(401).json({\r\n  //         \"status\": \"forbidden\",\r\n  //         \"error\": \"No account match for specified username and password\"\r\n  //       })\r\n\r\n  //     }\r\n  //   }\r\n  // })\r\n  db.all(sql, [], (err, rows) => {\r\n    if(err){\r\n      return res.status(400).json({err})\r\n    } else {\r\n      console.log(rows);\r\n    }\r\n  })\r\n\r\n})\r\n\r\n//get all users\r\napp.get('/v1/users', verifyToken, (req, res)=> {\r\n  let sql = `select * from users`;\r\n  db.query(sql, (err, result)=> {\r\n    if(err){\r\n      return res.status(400).json({err})\r\n    } else {\r\n      return res.status(200).json(result);\r\n    }\r\n  })\r\n})\r\n\r\n\r\n//create  a user\r\napp.post('/v1/auth/users', upload.single('userImage'), (req, res) => {\r\n  if (req.file === undefined) {\r\n    return res.status(400).json({\r\n      \"status\": \"bad request\", \"error\": \"No user image specified\"\r\n    })\r\n  } else {\r\n    const user = req.body\r\n    const firstName = user.firstName\r\n    const lastName = user.lastName\r\n    const email = user.email\r\n    const password = user.password\r\n    const gender = user.gender\r\n    const jobrole = user.jobRole\r\n    const dept = user.dept\r\n    const address = user.address\r\n    if (firstName.length < 1 || lastName.length < 0 || dept.length < 0) {\r\n      return res.status(401).json({\r\n        \"status\": \"forbidden\",\r\n        \"error\": \"one or more required field not supplied\"\r\n      })\r\n    }\r\n    let pattern = /^[a-zA-Z0-9]+@[\\w]+\\.com$/i\r\n    if (!pattern.test(email)) {\r\n      return res.status(401).json({\r\n        \"status\": \"forbidden\",\r\n        \"error\": \"email is invalid\"\r\n      })\r\n    }\r\n    let sql = `insert into users (firstName, lastName, email, password, gender, jobRole, dept, address, userImage) values ('${firstName}','${lastName}','${email}','${password}','${gender}','${jobrole}','${dept}','${address}','${'images/'+req.file.originalname}')`\r\n    db.all(sql, [],(err, result) => {\r\n      if (err) {\r\n        console.log(\"there was an error executing script\")\r\n        res.send(err)\r\n      } else {\r\n        let payload = { user_id: result.insertId }\r\n        let token = jwt.sign(payload, 'secretkey')\r\n        res.status(201).json({\r\n          \"status\": \"success\",\r\n          \"message\": \"User account successfully created\",\r\n          \"token\": token,\r\n          \"userId\": result.insertId\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\n//add an article\r\napp.post('/v1/articles', verifyToken, (req, res) => {\r\n  const title = req.body.title || 'no title'\r\n  const article = req.body.article\r\n  const user_id = req.user_id\r\n  if (!title || !article) {\r\n    return res.status(400).json({ \"status\": \"invalid input\", \"error\": \"title and article must be supplied\" });\r\n  } else {\r\n    let sql = `insert into article (title, article, users_user_id) values(\"${title}\",\"${article}\",${req.userId})`\r\n    db.query(sql, (err, result) => {\r\n      if (err) {\r\n        return res.status(400).json({ \"status\": \"error\", \"error\": \"unable to add article to database\" })\r\n      } else {\r\n        sql = `select * from article where article_id = ${result.insertId}`;\r\n        db.query(sql, (err, details) => {\r\n          return res.json({\r\n            \"status\": \"success\",\r\n            \"data\": {\r\n              \"message\": \"Article was created successfully\",\r\n              \"articleId\": details[0].article_id,\r\n              \"createdOn\": details[0].dateCreated,\r\n              \"title\": details[0].title,\r\n              \"flagged\": details[0].flagged\r\n            }\r\n          })\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\n//edit an article\r\napp.patch('/v1/articles/:articleId', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId\r\n  const title = req.body.title || 'no title';\r\n  const article = req.body.article;\r\n  if (title === '' || article === '') {\r\n    return res.status(400).json({ \"status\": \"invalid input\", \"error\": \"title and article must be supplied\" });\r\n  } else {\r\n    const sql = `update article set title = \"${title}\", article=\"${article}\" where article_id=${article_id} and users_user_id=${req.userId}`;\r\n    db.query(sql, (err, result) => {\r\n      if (err) {\r\n        return res.status(520).json({ \"status\": \"update failed\", \"error\": \"unable to update the article\" })\r\n      } else {\r\n        return res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"message\": \"Article successfully updated\",\r\n            \"title\": title,\r\n            \"article\": article\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n})\r\n\r\n//delete an article\r\napp.delete('/v1/articles/:articleId', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId\r\n  const sql = `delete from article where article_id = ${article_id} and users_user_id=${req.userId}`;\r\n  db.query(sql, (err, result) => {\r\n    if (err) {\r\n      console.log(err)\r\n      return res.json({ \"status\": \"error\", \"error\": \"unable to delete the record from database\" })\r\n    } else {\r\n      return res.status(200).json({\r\n        \"status\": \"success\",\r\n        \"data\": {\r\n          \"message\": \"Article successfully deleted\"\r\n        }\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//add a comment to a post/article\r\napp.post('/v1/articles/:articleId/comment', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId;\r\n  //verify comment is not empty\r\n  const comment = req.body.comment;\r\n  const patt = /[a-zA-Z0-9\\W]+/i\r\n  const patt1 = /[$-/:-?{-~!\"^_`\\[\\]@]/\r\n  //check if the comment contains at least a character or symbol\r\n  if (patt.test(comment) || patt1.test(comment)) {\r\n    //check if the article to be commented exists\r\n    let sql = `select * from article where article_id = ${article_id}`\r\n    db.query(sql, (err, result) => {\r\n      let answer = result[0]\r\n      if (result.length === 0) {\r\n        return res.status(404).json({ \"status\": \"failed\", \"error\": \"article does not exists\" })\r\n      } else {\r\n        //if article exists, then add a comment\r\n        sql = `insert into article_comment (users_user_id, article_article_id, comment) values (${req.userId},${article_id},'${comment}')`;\r\n        db.query(sql, (err, details) => {\r\n          if (err) {\r\n            return res.json({ \"status\": \"error\", \"error\": \"unable to add comment\" })\r\n          } else {\r\n            //get the creation date of the comment\r\n            sql = `select createdOn from article_comment where comment_id = ${details.insertId}`;\r\n            db.query(sql, (err, result_1) => {\r\n              return res.status(201).json({\r\n                \"status\": \"success\",\r\n                \"data\": {\r\n                  \"message\": \"comment successfully created\",\r\n                  \"createdOn\": result_1[0].createdOn,\r\n                  \"articleTitle\": answer.title,\r\n                  \"article\": answer.article,\r\n                  \"comment\": comment\r\n                }\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\n//get an article\r\napp.get('/v1/articles/:articleId', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId;\r\n  let sql = `select * from article where article_id = ${article_id}`;\r\n  //if article is found\r\n  db.query(sql, (err, result) => {\r\n    let answer = result[0];\r\n    if (result.length === 0) {\r\n      return res.status(404).json({ \"status\": \"Not found\", \"message\": \"article doesnt exist or already deleted\" })\r\n    } else {\r\n      sql = `select * from article_comment where article_article_id = ${article_id} and users_user_id=${req.userId}`;\r\n      db.query(sql, (err, details) => {\r\n\r\n        return res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"id\": answer.article_id,\r\n            \"createdOn\": answer.dateCreated,\r\n            \"title\": answer.title,\r\n            \"article\": answer.article,\r\n            \"comments\": details\r\n          }\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n// post gif\r\napp.post('/v1/gifs', verifyToken, upload.single('image'), (req, res, next) => {\r\n  if (req.file === undefined) {\r\n    return res.status(400).json({\r\n      \"status\": \"bad request\", \"error\": \"No gif image specified\"\r\n    })\r\n  } else {\r\n    let sql = `insert into gifs (imageUrl, title, users_user_id) values (\"${'images/'+req.file.originalname}\",\"${req.body.title || 'no title'}\",${req.userId})`\r\n    db.query(sql, (err, result) => {\r\n      if (err) {\r\n        return res.status(500).json({ \"status\": \"failed\", \"error\": err })\r\n      } else {\r\n        sql = `select * from gifs where gif_id=${result.insertId} and users_user_id=${req.userId}`;\r\n        db.query(sql, (err, result) => {\r\n          return res.status(201).json({\r\n            \"status\": \"success\",\r\n            \"data\": {\r\n              \"gifId\": result.gif_id,\r\n              \"message\": \"GIF image successfully posted\",\r\n              \"createdOn\": result.dateCreated,\r\n              \"title\": result.title,\r\n              \"imageUrl\": 'images/' + req.file.originalname\r\n            }\r\n          })\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\n//delete a gif\r\napp.delete('/v1/gifs/:gifId', verifyToken, (req, res) => {\r\n  const gifId = req.params.gifId;\r\n  let sql = `delete from gifs where gif_id = ${gifId}`;\r\n  db.query(sql, (err, result) => {\r\n    if (err) {\r\n      return res.status(400).json({ \"status\": \"failed\", \"error\": \"unable to delete specified gif image\" })\r\n    } else {\r\n      return res.status(200).json({\r\n        \"status\": \"success\",\r\n        \"data\": {\r\n          \"message\": \"gif post successfully deleted\"\r\n        }\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//add comment to a gif\r\napp.post('/v1/gifs/:gifId/comment', verifyToken, (req, res) => {\r\n  const gifId = req.params.gifId;\r\n  //verify comment is not empty\r\n  const comment = req.body.comment;\r\n  const patt = /[a-zA-Z0-9\\W]+/i\r\n  const patt1 = /[$-/:-?{-~!\"^_`\\[\\]@]/\r\n  //check if the comment contains at least a character or symbol\r\n  if (patt.test(comment) || patt1.test(comment)) {\r\n    //check if the article to be commented exists\r\n    let sql = `select * from gifs where gif_id = ${gifId}`\r\n    db.query(sql, (err, result) => {\r\n      let answer = result[0]\r\n      if (result.length === 0) {\r\n        return res.status(404).json({ \"status\": \"failed\", \"error\": \"gif does not exists\" })\r\n      } else {\r\n        //if article exists, then add a comment\r\n        sql = `insert into gif_comment (comment, gifs_gif_id, users_user_id) values (\"${comment}\",${gifId},${req.userId})`;\r\n        db.query(sql, (err, details) => {\r\n          if (err) {\r\n            return res.json({ \"status\": \"error\", \"error\": \"unable to add comment\" })\r\n          } else {\r\n            //get the creation date of the comment\r\n            sql = `select createdOn from gif_comment where gif_comment_id = ${details.insertId}`;\r\n            db.query(sql, (err, result_1) => {\r\n              return res.status(201).json({\r\n                \"status\": \"success\",\r\n                \"data\": {\r\n                  \"message\": \"comment successfully created\",\r\n                  \"createdOn\": result_1[0].createdOn,\r\n                  \"gifTitle\": answer.title,\r\n                  \"comment\": comment\r\n                }\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\n//get a specific gif\r\napp.get('/v1/gifs/:gifId', verifyToken, (req, res) => {\r\n  const gifId = req.params.gifId;\r\n  let sql = `select * from gifs where gif_id = ${gifId}`;\r\n  //if article is found\r\n  db.query(sql, (err, result) => {\r\n    let answer = result[0];\r\n    if (result.length === 0) {\r\n      return res.status(404).json({ \"status\": \"Not found\", \"message\": \"gif doesn't exist or already deleted\" })\r\n    } else {\r\n      sql = `select * from gif_comment where gifs_gif_id = ${gifId} and users_user_id=${req.userId}`;\r\n      db.query(sql, (err, details) => {\r\n\r\n        return res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"id\": answer.gif_id,\r\n            \"createdOn\": answer.dateCreated,\r\n            \"title\": answer.title,\r\n            \"url\": answer.imageUrl,\r\n            \"comments\": details\r\n          }\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\nconst compare = (a, b) => {\r\n  if (a.dateCreated > b.dateCreated) { return -1 } else if (a.dateCreated < b.dateCreated) { return 1 } else { return 0 }\r\n}\r\n//get all articles and gif\r\napp.get('/v1/feed', verifyToken, (req, res) => {\r\n  let sql = `\r\n  select article_id,title,article,dateCreated,users_user_id,flagged,firstName,lastname\r\nfrom article\r\njoin users on users.user_id = article.users_user_id;\r\n  `\r\n  db.query(sql, (err, result) => {\r\n    if (err) {\r\n    } else {\r\n      let sql = 'select gif_id,imageUrl,title,dateCreated,users_user_id, firstname,lastname from gifs join users on users.user_id = gifs.users_user_id'\r\n      db.query(sql, (err, details) => {\r\n        let all_feed = result.concat(details);\r\n        all_feed.sort(compare);\r\n        res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": all_feed\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//get all article and gif for a single user\r\napp.get('/v1/feed/:userId', verifyToken, (req, res) => {\r\n  let sql = `\r\n  select article_id,title,article,dateCreated,users_user_id,flagged,firstName,lastname\r\nfrom article\r\njoin users on users.user_id = article.users_user_id\r\nwhere users_user_id=${req.userId};\r\n  `\r\n\r\n  db.query(sql, (err, result) => {\r\n    if (err) {\r\n      console.log(err)\r\n    } else {\r\n      let sql = `\r\n      select gif_id,imageUrl,title,dateCreated,users_user_id, firstname,lastname from gifs\r\n      join users on users.user_id = gifs.users_user_id\r\n      where users_user_id=${req.userId}`;\r\n\r\n      db.query(sql, (err, details) => {\r\n        let all_feed = result.concat(details);\r\n        all_feed.sort(compare);\r\n        res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": all_feed\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//get all flagged post\r\napp.get('/v1/flagged', verifyToken, (req, res) => {\r\n  let sql = `select * from article where flagged = 't' `\r\n  db.query(sql, (err, result) => {\r\n    if (err) {\r\n      return res.status(400).json({ err })\r\n    } else {\r\n      return res.status(200).json({\r\n        \"status\": \"success\",\r\n        \"data\": result\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//flag a post\r\napp.post('/v1/flagged/:articleId', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId;\r\n  let flagged = 't';\r\n  let sql = `select * from article where article_id = ${article_id}`;\r\n  db.query(sql, (err, result) => {\r\n    console.log(result);\r\n    if (err) {\r\n      return res.status(400).json({ err });\r\n    } else {\r\n      flagged = result[0].flagged;\r\n      if (flagged == 'f') {\r\n        sql = `update article set flagged = 't' where article_id = ${article_id}`;\r\n      } else {\r\n        sql = `update article set flagged = 'f' where article_id = ${article_id}`;\r\n      }\r\n      db.query(sql, (err, result) => {\r\n        if (err) {\r\n          return res.status(400).json({ err })\r\n        } else {\r\n          return res.status(200).json({\r\n            \"message\": \"flagged successfully\",\r\n            \"article_id\": article_id,\r\n          })\r\n        }\r\n      })\r\n    }\r\n  })\r\n})\r\napp.listen(port, (err) => {\r\n  if (err) {\r\n    console.log(err)\r\n  }\r\n  console.log(chalk.red(`listening of port ${port}. starting app in dev mode`))\r\n})"]}