{"version":3,"sources":["../src/server.js"],"names":["bodyParser","require","Cors","jwt","port","process","env","PORT","app","use","req","res","next","header","express","static","storage","multer","diskStorage","destination","file","cb","isValid","MIMETYPEMAP","mimetype","error","Error","console","log","filename","name","originalname","upload","db","sqlite3","Database","err","message","urlencoded","limit","extended","json","verifyToken","headers","token","status","verify","decoded","userId","user_id","get","send","post","email","body","password","pattern","test","all","result","length","payload","sign","sql","single","undefined","user","firstName","lastName","gender","jobrole","jobRole","dept","address","insertId","title","article","run","lastID","rows","article_id","createdOn","patch","params","articleId","delete","comment","patt","patt1","answer","rows1","details","dateCreated","gifId","result_1","gif_id","imageUrl","compare","a","b","result1","all_feed","concat","sort","gif_result","flagged","listen","chalk","red"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\r\nimport chalk from 'chalk';\r\nimport mysql from 'mysql';\r\nimport sqlite3 from 'sqlite3';\r\nimport multer from 'multer';\r\nconst bodyParser = require('body-parser');\r\nconst Cors = require('cors')\r\n\r\nconst jwt = require('jsonwebtoken');\r\n\r\n\r\nconst port = process.env.PORT || 3000;\r\nconst app = express();\r\n\r\n\r\napp.use(function (req, res, next) {\r\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n  res.header(\"Access-Control-Allow-Methods\", \"POST, GET, DELETE, PUT, OPTIONS\");\r\n  res.header(\"Access-Control-Allow-Headers\", \"*\");\r\n  next();\r\n});\r\n\r\napp.use('/images', express.static('images'));\r\n//to store images in a folder in node js\r\nconst storage = multer.diskStorage({\r\n  destination: function (req, file, cb) {\r\n    const isValid = MIMETYPEMAP[file.mimetype];\r\n    let error = new Error('invalid mime type');\r\n    if (isValid) {\r\n      error = null\r\n      console.log(file)\r\n      cb(error, './images');\r\n    }\r\n\r\n  },\r\n  filename: function (req, file, cb) {\r\n    const name = file.originalname;\r\n    cb(null, name);\r\n  }\r\n})\r\nconst MIMETYPEMAP = {\r\n  'image/png': 'png',\r\n  'image/jpg': 'jpg',\r\n  'image/jpeg': 'jpg'\r\n}\r\n//to configure which type of file to accept\r\n// const fileFilter = (req, file, cb) => {\r\n//   if (file.mimetype === 'image/gif') {\r\n//     cb(null, true);\r\n//   } else {\r\n//     cb(null, false)\r\n//   }\r\n// }\r\nconst upload = multer({ storage: storage, /*fileFilter*/ });\r\n\r\nconst db = new sqlite3.Database('teamwork.db', (err) => {\r\n  if (err) {\r\n    return console.log(err.message);\r\n  }\r\n  console.log('Connected to database')\r\n});\r\n\r\napp.use(bodyParser.urlencoded({ limit: '50mb', extended: true }));\r\napp.use(bodyParser.json({ limit: '50mb' })); // parse form data client\r\n\r\n\r\nconst verifyToken = (req, res, next) => {\r\n  if (!req.headers.token) {\r\n    return res.status(401).json({ \"status\": \"token error\", \"error\": \"Unauthorized request\" })\r\n  }\r\n  const token = req.headers.token\r\n  if (token === 'null') {\r\n    return res.status(401).json({ \"status\": \"token error\", \"error\": \"Token is required\" })\r\n  }\r\n  jwt.verify(token, 'secretkey', (err, decoded) => {\r\n    if (err) {\r\n      return res.status(401).json({ \"status\": \"token error\", \"error\": \"Unauthorized request\" })\r\n    }\r\n    req.userId = decoded.user_id\r\n  })\r\n  next()\r\n}\r\n//routes for creating and authenticating users\r\napp.get('/api', (req, res) => {\r\n  res.send('Welcome to the TeamWork')\r\n})\r\n\r\n//login a user\r\napp.post('/v1/auth/signin', (req, res) => {\r\n  const email = req.body.email;\r\n  const password = req.body.password;\r\n  if (!req.body.email || !req.body.password) {\r\n    return res.status(400).json({\r\n      'status': 'invalid request',\r\n      'error': \"username and password are required\"\r\n    })\r\n  }\r\n  if (email === '' || password === '') {\r\n    return res.status(401).json({\r\n      \"status\": \"forbidden\",\r\n      \"error\": \"username and password are required\"\r\n    })\r\n  }\r\n  let pattern = /^[a-zA-Z0-9]+@[\\w]+\\.com$/i\r\n  if (!pattern.test(email)) {\r\n    return res.status(401).json({\r\n      \"status\": \"forbidden\",\r\n      \"error\": \"email is invalid\"\r\n    })\r\n  }\r\n  db.all(`select * from users where email='${email}' and password='${password}'`, [], (err, result) => {\r\n    if (err) {\r\n      console.log(err)\r\n    } else {\r\n\r\n      if (result.length > 0) {\r\n        let payload = { user_id: result[0].user_id }\r\n        let token = jwt.sign(payload, 'secretkey')\r\n        res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"token\": token,\r\n            \"userId\": payload.user_id,\r\n            \"userData\": result\r\n          }\r\n        })\r\n      } else {\r\n        res.status(401).json({\r\n          \"status\": \"forbidden\",\r\n          \"error\": \"No account match for specified username and password\"\r\n        })\r\n\r\n      }\r\n    }\r\n  })\r\n})\r\n\r\n//get all users\r\napp.get('/v1/users', verifyToken, (req, res) => {\r\n  let sql = `select * from users`;\r\n  db.all(sql, [], (err, result) => {\r\n    if (err) {\r\n      return res.status(400).json({ err })\r\n    } else {\r\n      return res.status(200).json(result);\r\n    }\r\n  })\r\n})\r\n\r\n\r\n//create  a user\r\napp.post('/v1/auth/users', upload.single('userImage'), (req, res) => {\r\n  if (req.file === undefined) {\r\n    return res.status(400).json({\r\n      \"status\": \"bad request\", \"error\": \"No user image specified\"\r\n    })\r\n  } else {\r\n    const user = req.body\r\n    const firstName = user.firstName\r\n    const lastName = user.lastName\r\n    const email = user.email\r\n    const password = user.password\r\n    const gender = user.gender\r\n    const jobrole = user.jobRole\r\n    const dept = user.dept\r\n    const address = user.address\r\n    if (firstName.length < 1 || lastName.length < 0 || dept.length < 0) {\r\n      return res.status(401).json({\r\n        \"status\": \"forbidden\",\r\n        \"error\": \"one or more required field not supplied\"\r\n      })\r\n    }\r\n    let pattern = /^[a-zA-Z0-9]+@[\\w]+\\.com$/i\r\n    if (!pattern.test(email)) {\r\n      return res.status(401).json({\r\n        \"status\": \"forbidden\",\r\n        \"error\": \"email is invalid\"\r\n      })\r\n    }\r\n    let sql = `insert into users (firstName, lastName, email, password, gender, jobRole, dept, address, userImage) values ('${firstName}','${lastName}','${email}','${password}','${gender}','${jobrole}','${dept}','${address}','${'images/' + req.file.originalname}')`\r\n    db.all(sql, [], (err, result) => {\r\n      if (err) {\r\n        console.log(\"there was an error executing script\")\r\n        res.send(err)\r\n      } else {\r\n        let payload = { user_id: result.insertId }\r\n        let token = jwt.sign(payload, 'secretkey')\r\n        res.status(201).json({\r\n          \"status\": \"success\",\r\n          \"message\": \"User account successfully created\",\r\n          \"token\": token,\r\n          \"userId\": result.insertId\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\n//add an article\r\napp.post('/v1/articles', verifyToken, (req, res) => {\r\n  const title = req.body.title || 'no title';\r\n  const article = req.body.article;\r\n  const user_id = req.user_id;\r\n  if (!title || !article) {\r\n    return res.status(400).json({ \"status\": \"invalid input\", \"error\": \"title and article must be supplied\" });\r\n  } else {\r\n    db.run(`insert into article (title, article, users_user_id) values (?,?,?)`, [title, article, req.userId], function (err) {\r\n      if (err) {\r\n        return res.status(400).json({ err })\r\n      }\r\n      db.all(`select * from article where article_id = ${this.lastID}`, [], function (err, rows) {\r\n        return res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"message\": \"article successfully posted\",\r\n            \"articleId\": rows[0].article_id,\r\n            \"createdOn\": rows[0].createdOn,\r\n            \"title\": rows[0].title\r\n          }\r\n        })\r\n      })\r\n    }\r\n    )\r\n  }\r\n})\r\n\r\n//edit an article\r\napp.patch('/v1/articles/:articleId', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId\r\n  const title = req.body.title || 'no title';\r\n  const article = req.body.article;\r\n  if (title === '' || article === '') {\r\n    return res.status(400).json({ \"status\": \"invalid input\", \"error\": \"title and article must be supplied\" });\r\n  } else {\r\n    let sql = `update article set title =?, article=? where article_id=? and users_user_id=?`;\r\n    db.run(sql, [title, article, article_id, req.userId], function (err, rows) {\r\n      if (err) {\r\n        return res.status(400).json({ \"status\": \"update failed\", \"error\": \"unable to update the article\" })\r\n      } else {\r\n        db.all(`select * from article where article_id = ${article_id}`, [], function (err, rows) {\r\n          if (err) {\r\n            return res.status(400).json({ err })\r\n          }\r\n          return res.status(200).json({\r\n            \"status\": \"success\",\r\n            \"data\": {\r\n              \"message\": \"Article successfully updated\",\r\n              \"title\": rows[0].title,\r\n              \"article\": rows[0].article\r\n            }\r\n          })\r\n        });\r\n\r\n      }\r\n    })\r\n  }\r\n\r\n})\r\n\r\n//delete an article\r\napp.delete('/v1/articles/:articleId', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId\r\n  const sql = `delete from article where article_id = ? and users_user_id=?`;\r\n  db.run(sql, [article_id, req.userId], function (err) {\r\n    if (err) {\r\n      console.log(err)\r\n      return res.json({ \"status\": \"error\", \"error\": \"unable to delete the record from database\" })\r\n    } else {\r\n      return res.status(200).json({\r\n        \"status\": \"success\",\r\n        \"data\": {\r\n          \"message\": `Article with id ${article_id} successfully deleted`\r\n        }\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//add a comment to a post/article\r\napp.post('/v1/articles/:articleId/comment', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId;\r\n  //verify comment is not empty\r\n  const comment = req.body.comment;\r\n  const patt = /[a-zA-Z0-9\\W]+/i\r\n  const patt1 = /[$-/:-?{-~!\"^_`\\[\\]@]/\r\n  //check if the comment contains at least a character or symbol\r\n  if (patt.test(comment) || patt1.test(comment)) {\r\n    //check if the article to be commented exists\r\n    let sql = `select * from article where article_id = ?`;\r\n    db.all(sql, [article_id], function (err, rows) {\r\n      let answer = rows[0]\r\n      if (rows.length === 0) {\r\n        return res.status(404).json({ \"status\": \"failed\", \"error\": \"article does not exists\" })\r\n      } else {\r\n        //if article exists, then add a comment\r\n        sql = `insert into article_comment (users_user_id, article_article_id, comment) values (?,?,?)`;\r\n        db.run(sql, [req.userId, article_id, comment], function (err) {\r\n          if (err) {\r\n            return res.json({ \"status\": \"error\", \"error\": \"unable to add comment\" })\r\n          } else {\r\n            //get the creation date of the comment\r\n            sql = `select createdOn from article_comment where comment_id = ?`;\r\n            db.all(sql, [this.lastID], function (err, rows1) {\r\n              return res.status(201).json({\r\n                \"status\": \"success\",\r\n                \"data\": {\r\n                  \"message\": \"comment successfully created\",\r\n                  \"createdOn\": rows1[0].createdOn,\r\n                  \"articleTitle\": answer.title,\r\n                  \"article\": answer.article,\r\n                  \"comment\": comment\r\n                }\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\n//get an article\r\napp.get('/v1/articles/:articleId', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId;\r\n  let sql = `select * from article where article_id = ?`;\r\n  //if article is found\r\n  db.all(sql, [article_id], function (err, rows) {\r\n    if (rows.length === 0) {\r\n      return res.status(404).json({ \"status\": \"Not found\", \"message\": \"article doesnt exist or already deleted\" })\r\n    } else {\r\n      let answer = rows[0];\r\n      sql = `select * from article_comment where article_article_id = ?`;\r\n      db.all(sql, [article_id], function (err, details) {\r\n\r\n        return res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"id\": answer.article_id,\r\n            \"createdOn\": answer.dateCreated,\r\n            \"title\": answer.title,\r\n            \"article\": answer.article,\r\n            \"comments\": details\r\n          }\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n// post gif\r\napp.post('/v1/gifs', verifyToken, upload.single('image'), (req, res, next) => {\r\n  return res.send('your file was uploaded');\r\n\r\n  // if (!req.file) {\r\n  //   console.log(req.file)\r\n  //   return res.status(400).json({\r\n  //     \"status\": \"bad request\", \"error\": \"No gif image specified\"\r\n  //   })\r\n  // } else {\r\n  //   let sql = `insert into gifs (imageUrl, title, users_user_id) values (?,?,?)`;\r\n  //   db.run(sql, ['images/' + req.file.originalname, req.body.title || 'no title', req.userId], function (err) {\r\n  //     if (err) {\r\n  //       return res.status(500).json({ \"status\": \"failed\", \"error\": \"there was an erro storing the image\" })\r\n  //     } else {\r\n  //       sql = `select * from gifs where gif_id=? and users_user_id=?`;\r\n  //       db.all(sql, [this.lastID, req.userId], function (err, rows) {\r\n  //         return res.status(201).json({\r\n  //           \"status\": \"success\",\r\n  //           \"data\": {\r\n  //             \"gifId\": rows[0].gif_id,\r\n  //             \"message\": \"GIF image successfully posted\",\r\n  //             \"createdOn\": rows[0].dateCreated,\r\n  //             \"title\": rows[0].title,\r\n  //             \"imageUrl\": 'images/' + req.file.originalname\r\n  //           }\r\n  //         })\r\n  //       })\r\n  //     }\r\n  //   })\r\n  // }\r\n})\r\n\r\n//delete a gif\r\napp.delete('/v1/gifs/:gifId', verifyToken, (req, res) => {\r\n  const gifId = req.params.gifId;\r\n  let sql = `delete from gifs where gif_id = ?`;\r\n  db.run(sql, [gifId], function (err) {\r\n    if (err) {\r\n      return res.status(400).json({ \"status\": \"failed\", \"error\": \"unable to delete specified gif image\" })\r\n    } else {\r\n      return res.status(200).json({\r\n        \"status\": \"success\",\r\n        \"data\": {\r\n          \"message\": \"gif post successfully deleted\"\r\n        }\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//add comment to a gif\r\napp.post('/v1/gifs/:gifId/comment', verifyToken, (req, res) => {\r\n  const gifId = req.params.gifId;\r\n  //verify comment is not empty\r\n  const comment = req.body.comment;\r\n  const patt = /[a-zA-Z0-9\\W]+/i\r\n  const patt1 = /[$-/:-?{-~!\"^_`\\[\\]@]/\r\n  //check if the comment contains at least a character or symbol\r\n  if (patt.test(comment) || patt1.test(comment)) {\r\n    //check if the article to be commented exists\r\n    let sql = `select * from gifs where gif_id = ?`\r\n    db.all(sql, [gifId], function (err, rows) {\r\n      if (rows.length === 0) {\r\n        return res.status(404).json({ \"status\": \"failed\", \"error\": \"gif does not exists\" })\r\n      } else {\r\n        const answer = rows[0];\r\n        //if article exists, then add a comment\r\n        sql = `insert into gif_comment (comment, gifs_gif_id, users_user_id) values (?,?,?)`;\r\n        db.run(sql, [comment, gifId, req.userId], function (err) {\r\n          if (err) {\r\n            return res.json({ \"status\": \"error\", \"error\": \"unable to add comment\" })\r\n          } else {\r\n            //get the creation date of the comment\r\n            sql = `select createdOn from gif_comment where gif_comment_id = ?`;\r\n            db.all(sql, [this.lastID], function (err, result_1) {\r\n              return res.status(201).json({\r\n                \"status\": \"success\",\r\n                \"data\": {\r\n                  \"message\": \"comment successfully created\",\r\n                  \"createdOn\": result_1[0].createdOn,\r\n                  \"gifTitle\": answer.title,\r\n                  \"comment\": comment\r\n                }\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\n//get a specific gif\r\napp.get('/v1/gifs/:gifId', verifyToken, (req, res) => {\r\n  const gifId = req.params.gifId;\r\n  let sql = `select * from gifs where gif_id = ?`;\r\n  //if article is found\r\n  db.all(sql, [gifId], function (err, rows) {\r\n    if (rows.length === 0) {\r\n      return res.status(404).json({ \"status\": \"Not found\", \"message\": \"gif doesn't exist or already deleted\" })\r\n    } else {\r\n      const answer = rows[0];\r\n      sql = `select * from gif_comment where gifs_gif_id = ? and users_user_id=?`;\r\n      db.all(sql, [gifId, req.userId], function (err, details) {\r\n        return res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"id\": answer.gif_id,\r\n            \"createdOn\": answer.dateCreated,\r\n            \"title\": answer.title,\r\n            \"url\": answer.imageUrl,\r\n            \"comments\": details\r\n          }\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\nconst compare = (a, b) => {\r\n  if (a.dateCreated > b.dateCreated) { return -1 } else if (a.dateCreated < b.dateCreated) { return 1 } else { return 0 }\r\n}\r\n//get all articles and gif\r\napp.get('/v1/feed', verifyToken, (req, res) => {\r\n  let sql = `\r\n  select article_id,title,article,dateCreated,users_user_id,flagged,firstName,lastname\r\nfrom article\r\njoin users on users.user_id = article.users_user_id;\r\n  `\r\n  db.all(sql, [], function (err, rows) {\r\n    const result = rows\r\n    if (err) {\r\n      return res.json({ err })\r\n    } else {\r\n\r\n      let sql = `select gif_id,imageUrl,title,dateCreated,users_user_id, firstname,lastname\r\n      from gifs join users on users.user_id = gifs.users_user_id`;\r\n\r\n      db.all(sql, [], function (err, details) {\r\n        const result1 = details;\r\n        console.log(result1);\r\n        let all_feed = result.concat(result1);\r\n        all_feed.sort(compare);\r\n        res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": all_feed\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//get all article and gif for a single user\r\napp.get('/v1/feed/:userId', verifyToken, (req, res) => {\r\n  let sql = `select * from article where users_user_id = ?`\r\n\r\n  db.all(sql, [req.userId], function (err, rows) {\r\n    if (err) {\r\n      return res.json({ err });\r\n    } else {\r\n      const result = rows;\r\n      let sql = `select * from gifs where users_user_id = ?`;\r\n      db.all(sql, [req.userId], function (err, rows) {\r\n        if (err) {\r\n          return res.json({ err });\r\n        }\r\n        const gif_result = rows;\r\n        let all_feed = result.concat(gif_result);\r\n        all_feed.sort(compare);\r\n        res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": all_feed\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//get all flagged post\r\napp.get('/v1/flagged', verifyToken, (req, res) => {\r\n  let sql = `select * from article where flagged = 't' `\r\n  db.all(sql, [], function (err, result) {\r\n    if (err) {\r\n      return res.status(400).json({ err })\r\n    } else {\r\n      return res.status(200).json({\r\n        \"status\": \"success\",\r\n        \"data\": result\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//flag a post\r\napp.post('/v1/flagged/:articleId', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId;\r\n  let flagged = 't';\r\n  let sql = `select * from article where article_id = ?`;\r\n  db.all(sql, [article_id], function (err, result) {\r\n    if (err) {\r\n      return res.status(400).json({ err });\r\n    } else {\r\n      flagged = result[0].flagged;\r\n      if (flagged == 'f') {\r\n        sql = `update article set flagged = 't' where article_id = ?`;\r\n      } else {\r\n        sql = `update article set flagged = 'f' where article_id = ?`;\r\n      }\r\n      db.run(sql, [article_id], function (err) {\r\n        if (err) {\r\n          return res.status(400).json({ err })\r\n        } else {\r\n          return res.status(200).json({\r\n            \"message\": \"flagged successfully\",\r\n            \"article_id\": article_id,\r\n          })\r\n        }\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\napp.listen(port, (err) => {\r\n  if (err) {\r\n    console.log(err)\r\n  }\r\n  console.log(chalk.red(`listening of port ${port}. starting app in dev mode`))\r\n})"]}