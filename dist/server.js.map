{"version":3,"sources":["../src/server.js"],"names":["bodyParser","require","Cors","jwt","port","process","env","PORT","app","use","req","res","next","header","express","static","storage","multer","diskStorage","destination","file","cb","filename","originalname","fileFilter","mimetype","upload","db","sqlite3","Database","err","console","log","message","urlencoded","extended","json","verifyToken","headers","token","status","verify","decoded","userId","user_id","get","send","post","email","body","password","pattern","test","all","result","length","payload","sign","sql","single","undefined","user","firstName","lastName","gender","jobrole","jobRole","dept","address","insertId","title","article","run","lastID","rows","article_id","createdOn","patch","params","articleId","delete","comment","patt","patt1","answer","rows1","details","dateCreated","gif_id","gifId","result_1","imageUrl","compare","a","b","result1","all_feed","concat","sort","gif_result","flagged","listen","chalk","red"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\r\nimport chalk from 'chalk';\r\nimport mysql from 'mysql';\r\nimport sqlite3 from 'sqlite3';\r\nconst bodyParser = require('body-parser');\r\nconst Cors = require('cors')\r\n\r\nconst jwt = require('jsonwebtoken');\r\nimport multer from 'multer';\r\n\r\nconst port = process.env.PORT || 3000;\r\nconst app = express();\r\n\r\n\r\napp.use(function (req, res, next) {\r\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n  res.header(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS\");\r\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n  next();\r\n});\r\n\r\napp.use('/images', express.static('images'));\r\n//to store images in a folder in node js\r\nconst storage = multer.diskStorage({\r\n  destination: function (req, file, cb) {\r\n    cb(null, './images');\r\n  },\r\n  filename: function (req, file, cb) {\r\n    cb(null, file.originalname);\r\n  }\r\n})\r\n//to configure which type of file to accept\r\nconst fileFilter = (req, file, cb) => {\r\n  if (file.mimetype === 'image/gif') {\r\n    cb(null, true);\r\n  } else {\r\n    cb(null, false)\r\n  }\r\n}\r\nconst upload = multer({ storage: storage, /*fileFilter*/ });\r\n\r\n// const db = mysql.createConnection({\r\n//   host: 'localhost',\r\n//   user: 'root',\r\n//   password: 'Oluranti08056965',\r\n//   database: 'teamwork'\r\n// })\r\nconst db = new sqlite3.Database('teamwork.db', (err) => {\r\n  if (err) {\r\n    return console.log(err.message);\r\n  }\r\n  console.log('Connected to database')\r\n});\r\n\r\n// db.connect((err) => {\r\n//   if (err) {\r\n//     console.log('database connection error')\r\n//     throw err\r\n//   }\r\n//   console.log('Connected to database')\r\n// })\r\n\r\n\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json()); // parse form data client\r\n\r\n\r\nconst verifyToken = (req, res, next) => {\r\n  if (!req.headers.token) {\r\n    return res.status(401).json({ \"status\": \"token error\", \"error\": \"Unauthorized request\" })\r\n  }\r\n  const token = req.headers.token\r\n  if (token === 'null') {\r\n    return res.status(401).json({ \"status\": \"token error\", \"error\": \"Token is required\" })\r\n  }\r\n  jwt.verify(token, 'secretkey', (err, decoded) => {\r\n    if (err) {\r\n      return res.status(401).json({ \"status\": \"token error\", \"error\": \"Unauthorized request\" })\r\n    }\r\n    req.userId = decoded.user_id\r\n  })\r\n  next()\r\n}\r\n//routes for creating and authenticating users\r\napp.get('/', (req, res) => {\r\n  res.send('Welcome to the TeamWork')\r\n})\r\n\r\n//login a user\r\napp.post('/v1/auth/signin', (req, res) => {\r\n  const email = req.body.email;\r\n  const password = req.body.password;\r\n  if (!req.body.email || !req.body.password) {\r\n    return res.status(400).json({\r\n      'status': 'invalid request',\r\n      'error': \"username and password are required\"\r\n    })\r\n  }\r\n  if (email === '' || password === '') {\r\n    return res.status(401).json({\r\n      \"status\": \"forbidden\",\r\n      \"error\": \"username and password are required\"\r\n    })\r\n  }\r\n  let pattern = /^[a-zA-Z0-9]+@[\\w]+\\.com$/i\r\n  if (!pattern.test(email)) {\r\n    return res.status(401).json({\r\n      \"status\": \"forbidden\",\r\n      \"error\": \"email is invalid\"\r\n    })\r\n  }\r\n  db.all(`select * from users where email='${email}' and password='${password}'`, [], (err, result) => {\r\n    if (err) {\r\n      console.log(err)\r\n    } else {\r\n\r\n      if (result.length > 0) {\r\n        let payload = { user_id: result[0].user_id }\r\n        let token = jwt.sign(payload, 'secretkey')\r\n        res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"token\": token,\r\n            \"userId\": payload.user_id\r\n          }\r\n        })\r\n      } else {\r\n        res.status(401).json({\r\n          \"status\": \"forbidden\",\r\n          \"error\": \"No account match for specified username and password\"\r\n        })\r\n\r\n      }\r\n    }\r\n  })\r\n})\r\n\r\n//get all users\r\napp.get('/v1/users', verifyToken, (req, res) => {\r\n  let sql = `select * from users`;\r\n  db.all(sql, [], (err, result) => {\r\n    if (err) {\r\n      return res.status(400).json({ err })\r\n    } else {\r\n      return res.status(200).json(result);\r\n    }\r\n  })\r\n})\r\n\r\n\r\n//create  a user\r\napp.post('/v1/auth/users', upload.single('userImage'), (req, res) => {\r\n  if (req.file === undefined) {\r\n    return res.status(400).json({\r\n      \"status\": \"bad request\", \"error\": \"No user image specified\"\r\n    })\r\n  } else {\r\n    const user = req.body\r\n    const firstName = user.firstName\r\n    const lastName = user.lastName\r\n    const email = user.email\r\n    const password = user.password\r\n    const gender = user.gender\r\n    const jobrole = user.jobRole\r\n    const dept = user.dept\r\n    const address = user.address\r\n    if (firstName.length < 1 || lastName.length < 0 || dept.length < 0) {\r\n      return res.status(401).json({\r\n        \"status\": \"forbidden\",\r\n        \"error\": \"one or more required field not supplied\"\r\n      })\r\n    }\r\n    let pattern = /^[a-zA-Z0-9]+@[\\w]+\\.com$/i\r\n    if (!pattern.test(email)) {\r\n      return res.status(401).json({\r\n        \"status\": \"forbidden\",\r\n        \"error\": \"email is invalid\"\r\n      })\r\n    }\r\n    let sql = `insert into users (firstName, lastName, email, password, gender, jobRole, dept, address, userImage) values ('${firstName}','${lastName}','${email}','${password}','${gender}','${jobrole}','${dept}','${address}','${'images/' + req.file.originalname}')`\r\n    db.all(sql, [], (err, result) => {\r\n      if (err) {\r\n        console.log(\"there was an error executing script\")\r\n        res.send(err)\r\n      } else {\r\n        let payload = { user_id: result.insertId }\r\n        let token = jwt.sign(payload, 'secretkey')\r\n        res.status(201).json({\r\n          \"status\": \"success\",\r\n          \"message\": \"User account successfully created\",\r\n          \"token\": token,\r\n          \"userId\": result.insertId\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\n//add an article\r\napp.post('/v1/articles', verifyToken, (req, res) => {\r\n  const title = req.body.title || 'no title';\r\n  const article = req.body.article;\r\n  const user_id = req.user_id;\r\n  if (!title || !article) {\r\n    return res.status(400).json({ \"status\": \"invalid input\", \"error\": \"title and article must be supplied\" });\r\n  } else {\r\n    db.run(`insert into article (title, article, users_user_id) values (?,?,?)`, [title, article, req.userId], function (err) {\r\n      if (err) {\r\n        return res.status(400).json({ err })\r\n      }\r\n      db.all(`select * from article where article_id = ${this.lastID}`, [], function (err, rows) {\r\n        return res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"message\": \"article successfully posted\",\r\n            \"articleId\": rows[0].article_id,\r\n            \"createdOn\": rows[0].createdOn,\r\n            \"title\": rows[0].title\r\n          }\r\n        })\r\n      })\r\n    }\r\n    )\r\n  }\r\n})\r\n\r\n//edit an article\r\napp.patch('/v1/articles/:articleId', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId\r\n  const title = req.body.title || 'no title';\r\n  const article = req.body.article;\r\n  if (title === '' || article === '') {\r\n    return res.status(400).json({ \"status\": \"invalid input\", \"error\": \"title and article must be supplied\" });\r\n  } else {\r\n    let sql = `update article set title =?, article=? where article_id=? and users_user_id=?`;\r\n    db.run(sql, [title, article, article_id, req.userId], function (err, rows) {\r\n      if (err) {\r\n        return res.status(400).json({ \"status\": \"update failed\", \"error\": \"unable to update the article\" })\r\n      } else {\r\n        db.all(`select * from article where article_id = ${article_id}`, [], function (err, rows) {\r\n          if (err) {\r\n            return res.status(400).json({ err })\r\n          }\r\n          return res.status(200).json({\r\n            \"status\": \"success\",\r\n            \"data\": {\r\n              \"message\": \"Article successfully updated\",\r\n              \"title\": rows[0].title,\r\n              \"article\": rows[0].article\r\n            }\r\n          })\r\n        });\r\n\r\n      }\r\n    })\r\n  }\r\n\r\n})\r\n\r\n//delete an article\r\napp.delete('/v1/articles/:articleId', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId\r\n  const sql = `delete from article where article_id = ? and users_user_id=?`;\r\n  db.run(sql, [article_id, req.userId], function (err) {\r\n    if (err) {\r\n      console.log(err)\r\n      return res.json({ \"status\": \"error\", \"error\": \"unable to delete the record from database\" })\r\n    } else {\r\n      return res.status(200).json({\r\n        \"status\": \"success\",\r\n        \"data\": {\r\n          \"message\": `Article with id ${article_id} successfully deleted`\r\n        }\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//add a comment to a post/article\r\napp.post('/v1/articles/:articleId/comment', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId;\r\n  //verify comment is not empty\r\n  const comment = req.body.comment;\r\n  const patt = /[a-zA-Z0-9\\W]+/i\r\n  const patt1 = /[$-/:-?{-~!\"^_`\\[\\]@]/\r\n  //check if the comment contains at least a character or symbol\r\n  if (patt.test(comment) || patt1.test(comment)) {\r\n    //check if the article to be commented exists\r\n    let sql = `select * from article where article_id = ?`;\r\n    db.all(sql, [article_id], function (err, rows) {\r\n      let answer = rows[0]\r\n      if (rows.length === 0) {\r\n        return res.status(404).json({ \"status\": \"failed\", \"error\": \"article does not exists\" })\r\n      } else {\r\n        //if article exists, then add a comment\r\n        sql = `insert into article_comment (users_user_id, article_article_id, comment) values (?,?,?)`;\r\n        db.run(sql, [req.userId, article_id, comment], function (err) {\r\n          if (err) {\r\n            return res.json({ \"status\": \"error\", \"error\": \"unable to add comment\" })\r\n          } else {\r\n            //get the creation date of the comment\r\n            sql = `select createdOn from article_comment where comment_id = ?`;\r\n            db.all(sql, [this.lastID], function (err, rows1) {\r\n              return res.status(201).json({\r\n                \"status\": \"success\",\r\n                \"data\": {\r\n                  \"message\": \"comment successfully created\",\r\n                  \"createdOn\": rows1[0].createdOn,\r\n                  \"articleTitle\": answer.title,\r\n                  \"article\": answer.article,\r\n                  \"comment\": comment\r\n                }\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\n//get an article\r\napp.get('/v1/articles/:articleId', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId;\r\n  let sql = `select * from article where article_id = ?`;\r\n  //if article is found\r\n  db.all(sql, [article_id], function (err, rows) {\r\n    if (rows.length === 0) {\r\n      return res.status(404).json({ \"status\": \"Not found\", \"message\": \"article doesnt exist or already deleted\" })\r\n    } else {\r\n      let answer = rows[0];\r\n      sql = `select * from article_comment where article_article_id = ? and users_user_id=?`;\r\n      db.all(sql, [article_id, req.userId], function (err, details) {\r\n\r\n        return res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"id\": answer.article_id,\r\n            \"createdOn\": answer.dateCreated,\r\n            \"title\": answer.title,\r\n            \"article\": answer.article,\r\n            \"comments\": details\r\n          }\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n// post gif\r\napp.post('/v1/gifs', verifyToken, upload.single('image'), (req, res, next) => {\r\n  if (req.file === undefined) {\r\n    return res.status(400).json({\r\n      \"status\": \"bad request\", \"error\": \"No gif image specified\"\r\n    })\r\n  } else {\r\n    let sql = `insert into gifs (imageUrl, title, users_user_id) values (?,?,?)`;\r\n    db.run(sql, ['images/' + req.file.originalname, req.body.title || 'no title', req.userId], function (err) {\r\n      if (err) {\r\n        return res.status(500).json({ \"status\": \"failed\", \"error\": err })\r\n      } else {\r\n        sql = `select * from gifs where gif_id=? and users_user_id=?`;\r\n        db.all(sql, [this.lastID, req.userId], function (err, rows) {\r\n          return res.status(201).json({\r\n            \"status\": \"success\",\r\n            \"data\": {\r\n              \"gifId\": rows[0].gif_id,\r\n              \"message\": \"GIF image successfully posted\",\r\n              \"createdOn\": rows[0].dateCreated,\r\n              \"title\": rows[0].title,\r\n              \"imageUrl\": 'images/' + req.file.originalname\r\n            }\r\n          })\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\n//delete a gif\r\napp.delete('/v1/gifs/:gifId', verifyToken, (req, res) => {\r\n  const gifId = req.params.gifId;\r\n  let sql = `delete from gifs where gif_id = ?`;\r\n  db.run(sql, [gifId], function (err) {\r\n    if (err) {\r\n      return res.status(400).json({ \"status\": \"failed\", \"error\": \"unable to delete specified gif image\" })\r\n    } else {\r\n      return res.status(200).json({\r\n        \"status\": \"success\",\r\n        \"data\": {\r\n          \"message\": \"gif post successfully deleted\"\r\n        }\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//add comment to a gif\r\napp.post('/v1/gifs/:gifId/comment', verifyToken, (req, res) => {\r\n  const gifId = req.params.gifId;\r\n  //verify comment is not empty\r\n  const comment = req.body.comment;\r\n  const patt = /[a-zA-Z0-9\\W]+/i\r\n  const patt1 = /[$-/:-?{-~!\"^_`\\[\\]@]/\r\n  //check if the comment contains at least a character or symbol\r\n  if (patt.test(comment) || patt1.test(comment)) {\r\n    //check if the article to be commented exists\r\n    let sql = `select * from gifs where gif_id = ?`\r\n    db.all(sql, [gifId], function (err, rows) {\r\n      if (rows.length === 0) {\r\n        return res.status(404).json({ \"status\": \"failed\", \"error\": \"gif does not exists\" })\r\n      } else {\r\n        const answer = rows[0];\r\n        //if article exists, then add a comment\r\n        sql = `insert into gif_comment (comment, gifs_gif_id, users_user_id) values (?,?,?)`;\r\n        db.run(sql, [comment, gifId, req.userId], function (err) {\r\n          if (err) {\r\n            return res.json({ \"status\": \"error\", \"error\": \"unable to add comment\" })\r\n          } else {\r\n            //get the creation date of the comment\r\n            sql = `select createdOn from gif_comment where gif_comment_id = ?`;\r\n            db.all(sql, [this.lastID], function (err, result_1) {\r\n              return res.status(201).json({\r\n                \"status\": \"success\",\r\n                \"data\": {\r\n                  \"message\": \"comment successfully created\",\r\n                  \"createdOn\": result_1[0].createdOn,\r\n                  \"gifTitle\": answer.title,\r\n                  \"comment\": comment\r\n                }\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\n//get a specific gif\r\napp.get('/v1/gifs/:gifId', verifyToken, (req, res) => {\r\n  const gifId = req.params.gifId;\r\n  let sql = `select * from gifs where gif_id = ?`;\r\n  //if article is found\r\n  db.all(sql, [gifId], function (err, rows) {\r\n    if (rows.length === 0) {\r\n      return res.status(404).json({ \"status\": \"Not found\", \"message\": \"gif doesn't exist or already deleted\" })\r\n    } else {\r\n      const answer = rows[0];\r\n      sql = `select * from gif_comment where gifs_gif_id = ? and users_user_id=?`;\r\n      db.all(sql, [gifId, req.userId], function (err, details) {\r\n        return res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"id\": answer.gif_id,\r\n            \"createdOn\": answer.dateCreated,\r\n            \"title\": answer.title,\r\n            \"url\": answer.imageUrl,\r\n            \"comments\": details\r\n          }\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\nconst compare = (a, b) => {\r\n  if (a.dateCreated > b.dateCreated) { return -1 } else if (a.dateCreated < b.dateCreated) { return 1 } else { return 0 }\r\n}\r\n//get all articles and gif\r\napp.get('/v1/feed', verifyToken, (req, res) => {\r\n  let sql = `\r\n  select article_id,title,article,dateCreated,users_user_id,flagged,firstName,lastname\r\nfrom article\r\njoin users on users.user_id = article.users_user_id;\r\n  `\r\n  db.all(sql, [], function (err, rows) {\r\n    const result = rows\r\n    if (err) {\r\n      return res.json({ err })\r\n    } else {\r\n\r\n      let sql = `select gif_id,imageUrl,title,dateCreated,users_user_id, firstname,lastname\r\n      from gifs join users on users.user_id = gifs.users_user_id`;\r\n\r\n      db.all(sql, [], function (err, details) {\r\n        const result1 = details;\r\n        console.log(result1);\r\n        let all_feed = result.concat(result1);\r\n        all_feed.sort(compare);\r\n        res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": all_feed\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//get all article and gif for a single user\r\napp.get('/v1/feed/:userId', verifyToken, (req, res) => {\r\n  let sql = `select * from article where users_user_id = ?`\r\n\r\n  db.all(sql, [req.userId], function (err, rows) {\r\n    if (err) {\r\n      return res.json({ err });\r\n    } else {\r\n      const result = rows;\r\n      let sql = `select * from gifs where users_user_id = ?`;\r\n      db.all(sql, [req.userId], function (err, rows) {\r\n        if (err) {\r\n          return res.json({ err });\r\n        }\r\n        const gif_result = rows;\r\n        let all_feed = result.concat(gif_result);\r\n        all_feed.sort(compare);\r\n        res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": all_feed\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//get all flagged post\r\napp.get('/v1/flagged', verifyToken, (req, res) => {\r\n  let sql = `select * from article where flagged = 't' `\r\n  db.all(sql, [], function (err, result) {\r\n    if (err) {\r\n      return res.status(400).json({ err })\r\n    } else {\r\n      return res.status(200).json({\r\n        \"status\": \"success\",\r\n        \"data\": result\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//flag a post\r\napp.post('/v1/flagged/:articleId', verifyToken, (req, res) => {\r\n  const article_id = req.params.articleId;\r\n  let flagged = 't';\r\n  let sql = `select * from article where article_id = ?`;\r\n  db.all(sql, [article_id], function (err, result) {\r\n    if (err) {\r\n      return res.status(400).json({ err });\r\n    } else {\r\n      flagged = result[0].flagged;\r\n      if (flagged == 'f') {\r\n        sql = `update article set flagged = 't' where article_id = ?`;\r\n      } else {\r\n        sql = `update article set flagged = 'f' where article_id = ?`;\r\n      }\r\n      db.run(sql, [article_id], function (err) {\r\n        if (err) {\r\n          return res.status(400).json({ err })\r\n        } else {\r\n          return res.status(200).json({\r\n            \"message\": \"flagged successfully\",\r\n            \"article_id\": article_id,\r\n          })\r\n        }\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\napp.listen(port, (err) => {\r\n  if (err) {\r\n    console.log(err)\r\n  }\r\n  console.log(chalk.red(`listening of port ${port}. starting app in dev mode`))\r\n})"]}