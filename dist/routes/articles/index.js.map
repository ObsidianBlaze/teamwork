{"version":3,"sources":["../../../src/routes/articles/index.js"],"names":["ArticleRouter","require","Router","route","post","req","res","title","body","article","user_id","status","json","db","run","userId","err","all","lastID","rows","article_id","createdOn","patch","params","articleId","console","log","sql","delete","get","length","answer","details","dateCreated","comment","patt","patt1","test","rows1","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const ArticleRouter = require('express').Router();\r\nimport db from '../../db';\r\n\r\n\r\n// route to add an article\r\nArticleRouter.route(\"/\")\r\n.post((req, res) => {\r\n  const title = req.body.title || 'no title';\r\n  const article = req.body.article;\r\n  const user_id = req.user_id;\r\n  if (!title || !article) {\r\n    return res.status(400).json({ \"status\": \"invalid input\", \"error\": \"title and article must be supplied\" });\r\n  } else {\r\n    db.run(`insert into article (title, article, users_user_id) values (?,?,?)`, [title, article, req.userId], function (err) {\r\n      if (err) {\r\n        return res.status(400).json({ err })\r\n      }\r\n      db.all(`select * from article where article_id = ${this.lastID}`, [], function (err, rows) {\r\n        return res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"message\": \"article successfully posted\",\r\n            \"articleId\": rows[0].article_id,\r\n            \"createdOn\": rows[0].createdOn,\r\n            \"title\": rows[0].title\r\n          }\r\n        })\r\n      })\r\n    }\r\n    )\r\n  }\r\n})\r\n\r\n// routes to  edit, delete and get an article\r\nArticleRouter.route(\"/:articleId\")\r\n.patch((req, res) => {\r\n  const article_id = req.params.articleId\r\n  const title = req.body.title || 'no title';\r\n  const article = req.body.article;\r\n  console.log(article_id, title, article)\r\n  if (title === '' || article === '') {\r\n    return res.status(400).json({ \"status\": \"invalid input\", \"error\": \"title and article must be supplied\" });\r\n  } else {\r\n    let sql = `update article set title =?, article=? where article_id=? and users_user_id=?`;\r\n    db.run(sql, [title, article, article_id, req.userId], function (err, rows) {\r\n      if (err) {\r\n        return res.status(400).json({ \"status\": \"update failed\", \"error\": \"unable to update the article\" })\r\n      } else {\r\n        db.all(`select * from article where article_id = ${article_id}`, [], function (err, rows) {\r\n          if (err) {\r\n            return res.status(400).json({ err })\r\n          }\r\n          return res.status(200).json({\r\n            \"status\": \"success\",\r\n            \"data\": {\r\n              \"message\": \"Article successfully updated\",\r\n              \"title\": rows[0].title,\r\n              \"article\": rows[0].article\r\n            }\r\n          })\r\n        });\r\n\r\n      }\r\n    })\r\n  }\r\n})\r\n.delete((req, res) => {\r\n  const article_id = req.params.articleId\r\n  const sql = `delete from article where article_id = ? and users_user_id=?`;\r\n  db.run(sql, [article_id, req.userId], function (err) {\r\n    if (err) {\r\n      console.log(err)\r\n      return res.json({ \"status\": \"error\", \"error\": \"unable to delete the record from database\" })\r\n    } else {\r\n      return res.status(200).json({\r\n        \"status\": \"success\",\r\n        \"data\": {\r\n          \"message\": `Article with id ${article_id} successfully deleted`\r\n        }\r\n      })\r\n    }\r\n})\r\n})\r\n.get((req, res) => {\r\n  const article_id = req.params.articleId;\r\n  let sql = `select * from article where article_id = ?`;\r\n  //if article is found\r\n  db.all(sql, [article_id], function (err, rows) {\r\n    if (rows.length === 0) {\r\n      return res.status(404).json({ \"status\": \"Not found\", \"message\": \"article doesnt exist or already deleted\" })\r\n    } else {\r\n      let answer = rows[0];\r\n      sql = `select * from article_comment where article_article_id = ?`;\r\n      db.all(sql, [article_id], function (err, details) {\r\n\r\n        return res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"id\": answer.article_id,\r\n            \"createdOn\": answer.dateCreated,\r\n            \"title\": answer.title,\r\n            \"article\": answer.article,\r\n            \"comments\": details\r\n          }\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//add a comment to a post/article\r\nArticleRouter.route(\"/:articleId/comment\")\r\n.post((req, res)=> {\r\n  const article_id = req.params.articleId;\r\n  //verify comment is not empty\r\n  const comment = req.body.comment;\r\n  const patt = /[a-zA-Z0-9\\W]+/i\r\n  const patt1 = /[$-/:-?{-~!\"^_`\\[\\]@]/\r\n  //check if the comment contains at least a character or symbol\r\n  if (patt.test(comment) || patt1.test(comment)) {\r\n    //check if the article to be commented exists\r\n    let sql = `select * from article where article_id = ?`;\r\n    db.all(sql, [article_id], function (err, rows) {\r\n      let answer = rows[0]\r\n      if (rows.length === 0) {\r\n        return res.status(404).json({ \"status\": \"failed\", \"error\": \"article does not exists\" })\r\n      } else {\r\n        //if article exists, then add a comment\r\n        sql = `insert into article_comment (users_user_id, article_article_id, comment) values (?,?,?)`;\r\n        db.run(sql, [req.userId, article_id, comment], function (err) {\r\n          if (err) {\r\n            return res.json({ \"status\": \"error\", \"error\": \"unable to add comment\" })\r\n          } else {\r\n            //get the creation date of the comment\r\n            sql = `select createdOn from article_comment where comment_id = ?`;\r\n            db.all(sql, [this.lastID], function (err, rows1) {\r\n              return res.status(201).json({\r\n                \"status\": \"success\",\r\n                \"data\": {\r\n                  \"message\": \"comment successfully created\",\r\n                  \"createdOn\": rows1[0].createdOn,\r\n                  \"articleTitle\": answer.title,\r\n                  \"article\": answer.article,\r\n                  \"comment\": comment\r\n                }\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\nmodule.exports = ArticleRouter"]}