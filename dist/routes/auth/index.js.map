{"version":3,"sources":["../../../src/routes/auth/index.js"],"names":["MainUserRouter","require","Router","jwt","route","post","req","res","email","body","password","status","json","pattern","test","db","all","err","result","console","log","length","payload","user_id","token","sign","file","undefined","user","firstName","lastName","gender","jobrole","jobRole","dept","address","sql","originalname","send","insertId","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const MainUserRouter = require('express').Router();\r\nimport db from '../../db';\r\nconst jwt = require('jsonwebtoken');\r\n\r\n// sigin of user\r\nMainUserRouter.route(\"/signin\").post((req, res) => {\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n    if (!req.body.email || !req.body.password) {\r\n      return res.status(400).json({\r\n        'status': 'invalid request',\r\n        'error': \"username and password are required\"\r\n      })\r\n    }\r\n    if (email === '' || password === '') {\r\n      return res.status(401).json({\r\n        \"status\": \"forbidden\",\r\n        \"error\": \"username and password are required\"\r\n      })\r\n    }\r\n    let pattern = /^[a-zA-Z0-9]+@[\\w]+\\.com$/i\r\n    if (!pattern.test(email)) {\r\n      return res.status(401).json({\r\n        \"status\": \"forbidden\",\r\n        \"error\": \"email is invalid\"\r\n      })\r\n    }\r\n    db.all(`select * from users where email='${email}' and password='${password}'`, [], (err, result) => {\r\n      if (err) {\r\n        console.log(err)\r\n      } else {\r\n\r\n        if (result.length > 0) {\r\n          let payload = { user_id: result[0].user_id }\r\n          let token = jwt.sign(payload, 'secretkey')\r\n          res.status(200).json({\r\n            \"status\": \"success\",\r\n            \"data\": {\r\n              \"token\": token,\r\n              \"userId\": payload.user_id,\r\n              \"userData\": result\r\n            }\r\n          })\r\n        } else {\r\n          res.status(401).json({\r\n            \"status\": \"forbidden\",\r\n            \"error\": \"No account match for specified username and password\"\r\n          })\r\n\r\n        }\r\n      }\r\n    })\r\n  })\r\n// to create new user\r\nMainUserRouter.route(\"/users\").post((req, res) => {\r\n    if (req.file === undefined) {\r\n      return res.status(400).json({\r\n        \"status\": \"bad request\", \"error\": \"No user image specified\"\r\n      })\r\n    } else {\r\n      const user = req.body\r\n      const firstName = user.firstName\r\n      const lastName = user.lastName\r\n      const email = user.email\r\n      const password = user.password\r\n      const gender = user.gender\r\n      const jobrole = user.jobRole\r\n      const dept = user.dept\r\n      const address = user.address || null\r\n      let pattern = /^[a-zA-Z0-9]+@[\\w]+\\.com$/i\r\n      if (firstName.length < 1 || lastName.length < 1 || password.length < 5) {\r\n        return res.status(401).json({\r\n          \"status\": \"forbidden\",\r\n          \"error\": \"one or more required field not valid or supplied\"\r\n        })\r\n      }else if (!pattern.test(email)) {\r\n        return res.status(401).json({\r\n          \"status\": \"forbidden\",\r\n          \"error\": \"email is invalid\"\r\n        })\r\n      }\r\n      let sql = `select * from users where email = ?`;\r\n      db.all(sql, [email], (err, result) => {\r\n        if (result.length > 0) {\r\n          return res.status(400).json({\r\n            \"status\": \"error\",\r\n            \"message\": \"email already exists\"\r\n          })\r\n        }else {\r\n          sql = `insert into users (firstName, lastName, email, password, gender, jobRole, dept, address, userImage) values\r\n       ('${firstName}','${lastName}','${email}','${password}','${gender}','${jobrole}','${dept}','${address}','${req.file.originalname}')`\r\n      db.all(sql, [], (err, result) => {\r\n        if (err) {\r\n          res.send(err)\r\n        } else {\r\n          let payload = { user_id: result.insertId }\r\n          let token = jwt.sign(payload, 'secretkey')\r\n          res.status(201).json({\r\n            \"status\": \"success\",\r\n            \"message\": \"User account successfully created\",\r\n            \"token\": token,\r\n            \"userId\": result.insertId\r\n          })\r\n        }\r\n      })\r\n        }\r\n      })\r\n    }\r\n  })\r\n\r\n\r\n\r\nmodule.exports = MainUserRouter"]}