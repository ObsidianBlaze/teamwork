{"version":3,"sources":["../../../src/routes/gifs/index.js"],"names":["gifRouter","require","Router","route","post","req","res","console","log","file","json","get","gifId","params","sql","db","all","err","rows","length","status","answer","userId","details","gif_id","dateCreated","title","imageUrl","delete","run","comment","body","patt","patt1","test","lastID","result_1","createdOn","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const gifRouter = require('express').Router();\r\nimport db from '../../db';\r\n\r\n\r\n// route to post a gif\r\ngifRouter.route(\"/\")\r\n.post((req, res) => {\r\n  console.log(req.file);\r\n  return res.json({'status':'success', 'data':\"file upload successfull\", \"file\":req.file});\r\n})\r\n\r\n//working with a single gif\r\ngifRouter.route(\"/:gifId\")\r\n.get((req, res) => {\r\n  const gifId = req.params.gifId;\r\n  let sql = `select * from gifs where gif_id = ?`;\r\n  //if article is found\r\n  db.all(sql, [gifId], function (err, rows) {\r\n    if (rows.length === 0) {\r\n      return res.status(404).json({ \"status\": \"Not found\", \"message\": \"gif doesn't exist or already deleted\" })\r\n    } else {\r\n      const answer = rows[0];\r\n      sql = `select * from gif_comment where gifs_gif_id = ? and users_user_id=?`;\r\n      db.all(sql, [gifId, req.userId], function (err, details) {\r\n        return res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"id\": answer.gif_id,\r\n            \"createdOn\": answer.dateCreated,\r\n            \"title\": answer.title,\r\n            \"url\": answer.imageUrl,\r\n            \"comments\": details\r\n          }\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n.delete((req, res)=>{\r\n  const gifId = req.params.gifId;\r\n  let sql = `delete from gifs where gif_id = ?`;\r\n  db.run(sql, [gifId], function (err) {\r\n    if (err) {\r\n      return res.status(400).json({ \"status\": \"failed\", \"error\": \"unable to delete specified gif image\" })\r\n    } else {\r\n      return res.status(200).json({\r\n        \"status\": \"success\",\r\n        \"data\": {\r\n          \"message\": \"gif post successfully deleted\"\r\n        }\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//comments on gifs\r\ngifRouter.route(\"/:gifId/comment\")\r\n.post((req, res)=>{\r\n  const gifId = req.params.gifId;\r\n  //verify comment is not empty\r\n  const comment = req.body.comment;\r\n  const patt = /[a-zA-Z0-9\\W]+/i\r\n  const patt1 = /[$-/:-?{-~!\"^_`\\[\\]@]/\r\n  //check if the comment contains at least a character or symbol\r\n  if (patt.test(comment) || patt1.test(comment)) {\r\n    //check if the article to be commented exists\r\n    let sql = `select * from gifs where gif_id = ?`\r\n    db.all(sql, [gifId], function (err, rows) {\r\n      if (rows.length === 0) {\r\n        return res.status(404).json({ \"status\": \"failed\", \"error\": \"gif does not exists\" })\r\n      } else {\r\n        const answer = rows[0];\r\n        //if article exists, then add a comment\r\n        sql = `insert into gif_comment (comment, gifs_gif_id, users_user_id) values (?,?,?)`;\r\n        db.run(sql, [comment, gifId, req.userId], function (err) {\r\n          if (err) {\r\n            return res.json({ \"status\": \"error\", \"error\": \"unable to add comment\" })\r\n          } else {\r\n            //get the creation date of the comment\r\n            sql = `select createdOn from gif_comment where gif_comment_id = ?`;\r\n            db.all(sql, [this.lastID], function (err, result_1) {\r\n              return res.status(201).json({\r\n                \"status\": \"success\",\r\n                \"data\": {\r\n                  \"message\": \"comment successfully created\",\r\n                  \"createdOn\": result_1[0].createdOn,\r\n                  \"gifTitle\": answer.title,\r\n                  \"comment\": comment\r\n                }\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\nmodule.exports = gifRouter"]}