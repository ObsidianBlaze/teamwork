{"version":3,"sources":["../../../src/routes/gifs/index.js"],"names":["gifRouter","require","Router","route","post","req","res","file","title","body","status","json","sql","db","run","filename","userId","err","all","lastID","rows","gif_id","dateCreated","imageUrl","get","gifId","params","length","answer","details","userImage","delete","comment","patt","patt1","test","result_1","createdOn","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const gifRouter = require('express').Router();\r\nimport db from '../../db';\r\n\r\n\r\n// route to post a gif\r\ngifRouter.route(\"/\")\r\n.post((req, res) => {\r\n  const file = req.file;\r\n  const title = req.body.title;\r\n  if (!file){\r\n    return res.status(400).json({\"status\":\"error\", \"data\":\"No image was selected\"})\r\n  } else if (title === \"\" || title === null){\r\n    return res.status(400).json({\"status\":\"error\", \"data\":\"No title was provided\"})\r\n  }\r\n  let sql = `insert into gifs (imageUrl,title,users_user_id) values (?,?,?)`;\r\n  db.run(sql, [file.filename, title, req.userId], function(err){\r\n    if (err) {\r\n      return res.status(400).json({ err })\r\n    }\r\n    db.all(`select * from gifs where gif_id = ${this.lastID}`, [], function (err, rows) {\r\n      return res.status(200).json({\r\n        \"status\": \"success\",\r\n        \"data\": {\r\n          \"message\": \"image successfully posted\",\r\n          \"imageId\": rows[0].gif_id,\r\n          \"createdOn\": rows[0].dateCreated,\r\n          \"title\": rows[0].title,\r\n          \"imageUrl\": rows[0].imageUrl\r\n        }\r\n  })\r\n  })\r\n  })})\r\n\r\n//working with a single gif\r\ngifRouter.route(\"/:gifId\")\r\n.get((req, res) => {\r\n  const gifId = req.params.gifId;\r\n  let sql = `select gif_id, imageurl, title, datetime(datecreated, 'localtime') 'datecreated',userimage from gifs\r\n  join users\r\n  on users.user_id = gifs.users_user_id\r\n  where gif_id = ?`;\r\n  //if article is found\r\n  db.all(sql, [gifId], function (err, rows) {\r\n    if (rows.length === 0) {\r\n      return res.status(404).json({ \"status\": \"error\", \"message\": \"gif doesn't exist or already deleted\" })\r\n    } else {\r\n      const answer = rows[0];\r\n      sql = `select gif_comment_id, comment, datetime(gif_comment.createdOn, 'localtime') 'createdon', userimage from gif_comment\r\n      join users on gif_comment.users_user_id = users.user_id\r\n      where gif_comment.gifs_gif_id = ?`;\r\n      db.all(sql, [gifId], function (err, details) {\r\n        return res.status(200).json({\r\n          \"status\": \"success\",\r\n          \"data\": {\r\n            \"id\": answer.gif_id,\r\n            \"createdOn\": answer.dateCreated,\r\n            \"title\": answer.title,\r\n            \"url\": answer.imageUrl,\r\n            \"userImage\":answer.userImage,\r\n            \"comments\": details\r\n          }\r\n        })\r\n      })\r\n    }\r\n  })\r\n})\r\n.delete((req, res)=>{\r\n  const gifId = req.params.gifId;\r\n  let sql = `delete from gifs where gif_id = ?`;\r\n  db.run(sql, [gifId], function (err) {\r\n    if (err) {\r\n      return res.status(400).json({ \"status\": \"failed\", \"error\": \"unable to delete specified gif image\" })\r\n    } else {\r\n      return res.status(200).json({\r\n        \"status\": \"success\",\r\n        \"data\": {\r\n          \"message\": \"gif post successfully deleted\"\r\n        }\r\n      })\r\n    }\r\n  })\r\n})\r\n\r\n//comments on gifs\r\ngifRouter.route(\"/:gifId/comment\")\r\n.post((req, res)=>{\r\n  const gifId = req.params.gifId;\r\n  //verify comment is not empty\r\n  const comment = req.body.comment;\r\n  const patt = /[a-zA-Z0-9\\W]+/i\r\n  const patt1 = /[$-/:-?{-~!\"^_`\\[\\]@]/\r\n  //check if the comment contains at least a character or symbol\r\n  if (patt.test(comment) || patt1.test(comment)) {\r\n    //check if the article to be commented exists\r\n    let sql = `select * from gifs where gif_id = ?`\r\n    db.all(sql, [gifId], function (err, rows) {\r\n      if (rows.length === 0) {\r\n        return res.status(404).json({ \"status\": \"failed\", \"error\": \"gif does not exists\" })\r\n      } else {\r\n        const answer = rows[0];\r\n        //if article exists, then add a comment\r\n        sql = `insert into gif_comment (comment, gifs_gif_id, users_user_id) values (?,?,?)`;\r\n        db.run(sql, [comment, gifId, req.userId], function (err) {\r\n          if (err) {\r\n            return res.json({ \"status\": \"error\", \"error\": \"unable to add comment\" })\r\n          } else {\r\n            //get the creation date of the comment\r\n            sql = `select createdOn from gif_comment where gif_comment_id = ?`;\r\n            db.all(sql, [this.lastID], function (err, result_1) {\r\n              return res.status(201).json({\r\n                \"status\": \"success\",\r\n                \"data\": {\r\n                  \"message\": \"comment successfully created\",\r\n                  \"createdOn\": result_1[0].createdOn,\r\n                  \"gifTitle\": answer.title,\r\n                  \"comment\": comment\r\n                }\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\nmodule.exports = gifRouter"]}